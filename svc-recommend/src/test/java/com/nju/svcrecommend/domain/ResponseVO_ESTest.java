/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 28 09:03:37 GMT 2020
 */

package com.nju.svcrecommend.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nju.svcrecommend.domain.ResponseVO;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ResponseVO_ESTest extends ResponseVO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildFailure("");
      boolean boolean0 = responseVO0.equals(responseVO0);
      assertTrue(boolean0);
      assertFalse(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildSuccess((Object) null);
      assertTrue(responseVO0.getSuccess());
      
      responseVO0.setSuccess(false);
      boolean boolean0 = responseVO0.getSuccess();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildFailure("Pvat?.L");
      responseVO0.getMessage();
      assertFalse(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildFailure("");
      responseVO0.getMessage();
      assertFalse(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildFailure("");
      ResponseVO responseVO1 = ResponseVO.buildSuccess((Object) responseVO0);
      ResponseVO responseVO2 = (ResponseVO)responseVO1.getContent();
      assertFalse(responseVO2.getSuccess());
      assertTrue(responseVO1.getSuccess());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResponseVO responseVO0 = new ResponseVO();
      // Undeclared exception!
      try { 
        responseVO0.getSuccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildSuccess();
      ResponseVO responseVO1 = ResponseVO.buildSuccess((Object) responseVO0);
      responseVO0.setContent(responseVO1);
      // Undeclared exception!
      try { 
        responseVO1.equals(responseVO0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildSuccess();
      ResponseVO responseVO1 = new ResponseVO();
      // Undeclared exception!
      try { 
        responseVO1.equals(responseVO0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildSuccess((Object) null);
      boolean boolean0 = responseVO0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildFailure("");
      responseVO0.getContent();
      assertFalse(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildSuccess((Object) null);
      boolean boolean0 = responseVO0.getSuccess();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResponseVO responseVO0 = new ResponseVO();
      String string0 = responseVO0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildFailure("");
      ResponseVO responseVO1 = ResponseVO.buildSuccess();
      boolean boolean0 = responseVO0.equals(responseVO1);
      assertFalse(responseVO0.getSuccess());
      assertTrue(responseVO1.getSuccess());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildSuccess();
      boolean boolean0 = responseVO0.equals("{Ghf}LO|O;4=o%");
      assertFalse(boolean0);
      assertTrue(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildSuccess();
      ResponseVO responseVO1 = ResponseVO.buildSuccess((Object) responseVO0);
      boolean boolean0 = responseVO1.equals(responseVO0);
      assertTrue(responseVO0.getSuccess());
      assertFalse(boolean0);
      assertTrue(responseVO1.getSuccess());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildSuccess();
      ResponseVO responseVO1 = ResponseVO.buildSuccess();
      assertTrue(responseVO1.equals((Object)responseVO0));
      
      responseVO1.setMessage("U*Qn$( ^&:");
      boolean boolean0 = responseVO1.equals(responseVO0);
      assertFalse(responseVO1.equals((Object)responseVO0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResponseVO responseVO0 = ResponseVO.buildSuccess();
      ResponseVO responseVO1 = ResponseVO.buildSuccess();
      boolean boolean0 = responseVO1.equals(responseVO0);
      assertTrue(responseVO1.getSuccess());
      assertTrue(boolean0);
  }
}
