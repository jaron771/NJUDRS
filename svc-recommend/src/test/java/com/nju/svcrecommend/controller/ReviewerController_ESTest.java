/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 29 11:09:13 GMT 2020
 */

package com.nju.svcrecommend.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nju.svcrecommend.controller.ReviewerController;
import com.nju.svcrecommend.dataMapper.acm.ACMReviewerMapper;
import com.nju.svcrecommend.dataMapper.ieee.IEEEReviewerMapper;
import com.nju.svcrecommend.domain.ResponseVO;
import com.nju.svcrecommend.domain.ReviewerReq;
import com.nju.svcrecommend.serviceImp.ReviewerSvcImp;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ReviewerController_ESTest extends ReviewerController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ACMReviewerMapper aCMReviewerMapper0 = mock(ACMReviewerMapper.class, new ViolatedAssumptionAnswer());
      doReturn("").when(aCMReviewerMapper0).getPublication(anyString());
      doReturn((ArrayList) null).when(aCMReviewerMapper0).getSameInsAuthorIDs(anyString());
      IEEEReviewerMapper iEEEReviewerMapper0 = mock(IEEEReviewerMapper.class, new ViolatedAssumptionAnswer());
      doReturn("4ddJE}$}jF9a$sD+~s!").when(iEEEReviewerMapper0).getPublication(anyString());
      ReviewerSvcImp reviewerSvcImp0 = new ReviewerSvcImp(aCMReviewerMapper0, iEEEReviewerMapper0);
      ReviewerController reviewerController0 = new ReviewerController(reviewerSvcImp0);
      ReviewerReq reviewerReq0 = new ReviewerReq("*nkA?g`6;", "WW~gBp|X%s", "WW~gBp|X%s", "*nkA?g`6;");
      // Undeclared exception!
      try { 
        reviewerController0.getShieldReviewers(reviewerReq0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ACMReviewerMapper aCMReviewerMapper0 = mock(ACMReviewerMapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(aCMReviewerMapper0).getPublication(anyString());
      IEEEReviewerMapper iEEEReviewerMapper0 = mock(IEEEReviewerMapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iEEEReviewerMapper0).getPublication(anyString());
      ReviewerSvcImp reviewerSvcImp0 = new ReviewerSvcImp(aCMReviewerMapper0, iEEEReviewerMapper0);
      ReviewerController reviewerController0 = new ReviewerController(reviewerSvcImp0);
      ReviewerReq reviewerReq0 = new ReviewerReq();
      ResponseVO responseVO0 = reviewerController0.getShieldReviewers(reviewerReq0);
      assertFalse(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ACMReviewerMapper aCMReviewerMapper0 = mock(ACMReviewerMapper.class, new ViolatedAssumptionAnswer());
      doReturn("v").when(aCMReviewerMapper0).getPublication(anyString());
      doReturn((ArrayList) null).when(aCMReviewerMapper0).getRecommendReviewersId(anyString() , anyString());
      IEEEReviewerMapper iEEEReviewerMapper0 = mock(IEEEReviewerMapper.class, new ViolatedAssumptionAnswer());
      doReturn("v").when(iEEEReviewerMapper0).getPublication(anyString());
      ReviewerSvcImp reviewerSvcImp0 = new ReviewerSvcImp(aCMReviewerMapper0, iEEEReviewerMapper0);
      ReviewerController reviewerController0 = new ReviewerController(reviewerSvcImp0);
      ReviewerReq reviewerReq0 = new ReviewerReq("", "com.nju.svcrecommend.controller.ReviewerController", "", "");
      // Undeclared exception!
      try { 
        reviewerController0.getRecommendReviewers(reviewerReq0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ACMReviewerMapper aCMReviewerMapper0 = mock(ACMReviewerMapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(aCMReviewerMapper0).getPublication(anyString());
      IEEEReviewerMapper iEEEReviewerMapper0 = mock(IEEEReviewerMapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iEEEReviewerMapper0).getPublication(anyString());
      ReviewerSvcImp reviewerSvcImp0 = new ReviewerSvcImp(aCMReviewerMapper0, iEEEReviewerMapper0);
      ReviewerController reviewerController0 = new ReviewerController(reviewerSvcImp0);
      ReviewerReq reviewerReq0 = new ReviewerReq();
      ResponseVO responseVO0 = reviewerController0.getRecommendReviewers(reviewerReq0);
      assertEquals("Publication not exist.", responseVO0.getMessage());
  }

    @Test(timeout = 4000)
    public void test4()  throws Throwable  {
        ACMReviewerMapper aCMReviewerMapper0 = mock(ACMReviewerMapper.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(aCMReviewerMapper0).getPublication(anyString());
        IEEEReviewerMapper iEEEReviewerMapper0 = mock(IEEEReviewerMapper.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(iEEEReviewerMapper0).getPublication(anyString());
        ReviewerSvcImp reviewerSvcImp0 = new ReviewerSvcImp(aCMReviewerMapper0, iEEEReviewerMapper0);
        ReviewerController reviewerController0 = new ReviewerController(reviewerSvcImp0);
        ReviewerReq reviewerReq0 = new ReviewerReq();
        ResponseVO responseVO0 = reviewerController0.getRecommendReviewers(reviewerReq0);
        assertFalse(responseVO0.getSuccess());
    }

    @Test(timeout = 4000)
    public void test5()  throws Throwable  {
        ACMReviewerMapper aCMReviewerMapper0 = mock(ACMReviewerMapper.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(aCMReviewerMapper0).getPublication(anyString());
        IEEEReviewerMapper iEEEReviewerMapper0 = mock(IEEEReviewerMapper.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(iEEEReviewerMapper0).getPublication(anyString());
        ReviewerSvcImp reviewerSvcImp0 = new ReviewerSvcImp(aCMReviewerMapper0, iEEEReviewerMapper0);
        ReviewerController reviewerController0 = new ReviewerController(reviewerSvcImp0);
        ReviewerReq reviewerReq0 = new ReviewerReq("4=j7p5x`~}6gJT[mF", "ND6G[n", "-4EU.#bC<;u=T_RsO", "-4EU.#bC<;u=T_RsO");
        ResponseVO responseVO0 = reviewerController0.getRecommendReviewers(reviewerReq0);
        assertEquals("Publication not exist.", responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test6()  throws Throwable  {
        ACMReviewerMapper aCMReviewerMapper0 = mock(ACMReviewerMapper.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(aCMReviewerMapper0).getPublication(anyString());
        IEEEReviewerMapper iEEEReviewerMapper0 = mock(IEEEReviewerMapper.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(iEEEReviewerMapper0).getPublication(anyString());
        ReviewerSvcImp reviewerSvcImp0 = new ReviewerSvcImp(aCMReviewerMapper0, iEEEReviewerMapper0);
        ReviewerController reviewerController0 = new ReviewerController(reviewerSvcImp0);
        ReviewerReq reviewerReq0 = new ReviewerReq("4=j7p5x`~}6gJT[mF", "ND6G[n", "-4EU.#bC<;u=T_RsO", "-4EU.#bC<;u=T_RsO");
        ResponseVO responseVO0 = reviewerController0.getShieldReviewers(reviewerReq0);
        assertEquals("Publication not exist.", responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test7()  throws Throwable  {
        ACMReviewerMapper aCMReviewerMapper0 = mock(ACMReviewerMapper.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(aCMReviewerMapper0).getPublication(anyString());
        IEEEReviewerMapper iEEEReviewerMapper0 = mock(IEEEReviewerMapper.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(iEEEReviewerMapper0).getPublication(anyString());
        ReviewerSvcImp reviewerSvcImp0 = new ReviewerSvcImp(aCMReviewerMapper0, iEEEReviewerMapper0);
        ReviewerController reviewerController0 = new ReviewerController(reviewerSvcImp0);
        ReviewerReq reviewerReq0 = new ReviewerReq("4=j7p5x`~}6gJT[mF", "ND6G[n", "-4EU.#bC<;u=T_RsO", "-4EU.#bC<;u=T_RsO");
        ResponseVO responseVO0 = reviewerController0.getShieldReviewers(reviewerReq0);
        assertEquals("Publication not exist.", responseVO0.getMessage());
    }
}
