/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 28 07:17:51 GMT 2020
 */

package com.nju.svcrecommend.serviceImp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nju.svcrecommend.dataMapper.acm.ACMSLRMapper;
import com.nju.svcrecommend.dataMapper.ieee.IEEESLRMapper;
import com.nju.svcrecommend.domain.AuthorVO;
import com.nju.svcrecommend.domain.PaperVO;
import com.nju.svcrecommend.domain.ResponseVO;
import com.nju.svcrecommend.serviceImp.SLRSvcImp;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class SLRSvcImp_ESTest extends SLRSvcImp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<PaperVO> arrayList0 = new ArrayList<PaperVO>();
      ACMSLRMapper aCMSLRMapper0 = mock(ACMSLRMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(aCMSLRMapper0).selectPaperVOsByKeyword(anyString() , anyInt() , anyInt());
      IEEESLRMapper iEEESLRMapper0 = mock(IEEESLRMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESLRMapper0).selectPaperVOsByKeyword(anyString() , anyInt() , anyInt());
      SLRSvcImp sLRSvcImp0 = new SLRSvcImp(aCMSLRMapper0, iEEESLRMapper0);
      // Undeclared exception!
      try { 
        sLRSvcImp0.getSLRRecommend("", 1316, 1316, 1316, 762, 762);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1730540
         //
         verifyException("com.nju.svcrecommend.serviceImp.SLRSvcImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArrayList<PaperVO> arrayList0 = new ArrayList<PaperVO>();
      ArrayList<AuthorVO> arrayList1 = new ArrayList<AuthorVO>();
      ACMSLRMapper aCMSLRMapper0 = mock(ACMSLRMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(aCMSLRMapper0).selectPaperVOsByKeyword(anyString() , anyInt() , anyInt());
      IEEESLRMapper iEEESLRMapper0 = mock(IEEESLRMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(iEEESLRMapper0).selectAuthorsByDocId(anyInt());
      doReturn(arrayList0).when(iEEESLRMapper0).selectPaperVOsByKeyword(anyString() , anyInt() , anyInt());
      SLRSvcImp sLRSvcImp0 = new SLRSvcImp(aCMSLRMapper0, iEEESLRMapper0);
      PaperVO paperVO0 = new PaperVO(901551, "RCM", "RCM", ")L:Eo, 7{hWd.z,(", ")L:Eo, 7{hWd.z,(", 901551, 901551, arrayList1, ")L:Eo, 7{hWd.z,(");
      arrayList0.add(paperVO0);
      ResponseVO responseVO0 = sLRSvcImp0.getSLRRecommend(")L:Eo, 7{hWd.z,(", 1, 1, 0, 901551, 0);
      assertNull(responseVO0.getMessage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayList<PaperVO> arrayList0 = new ArrayList<PaperVO>();
      ACMSLRMapper aCMSLRMapper0 = mock(ACMSLRMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, arrayList0).when(aCMSLRMapper0).selectPaperVOsByKeyword(anyString() , anyInt() , anyInt());
      IEEESLRMapper iEEESLRMapper0 = mock(IEEESLRMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, arrayList0).when(iEEESLRMapper0).selectPaperVOsByKeyword(anyString() , anyInt() , anyInt());
      SLRSvcImp sLRSvcImp0 = new SLRSvcImp(aCMSLRMapper0, iEEESLRMapper0);
      PaperVO paperVO0 = new PaperVO();
      arrayList0.add(paperVO0);
      arrayList0.add(paperVO0);
      sLRSvcImp0.getSLRRecommend(".", (-342), (-342), (-342), (-342), (-342));
      // Undeclared exception!
      try { 
        sLRSvcImp0.getSLRRecommend(".", 3, 3, (-342), (-342), (-342));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayList<PaperVO> arrayList0 = new ArrayList<PaperVO>();
      ACMSLRMapper aCMSLRMapper0 = mock(ACMSLRMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(aCMSLRMapper0).selectAuthorsByDocId(anyInt());
      doReturn((String) null).when(aCMSLRMapper0).selectKeywordsByDocId(anyInt());
      doReturn(arrayList0).when(aCMSLRMapper0).selectPaperVOsByKeyword(anyString() , anyInt() , anyInt());
      ArrayList<AuthorVO> arrayList1 = new ArrayList<AuthorVO>();
      IEEESLRMapper iEEESLRMapper0 = mock(IEEESLRMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESLRMapper0).selectPaperVOsByKeyword(anyString() , anyInt() , anyInt());
      SLRSvcImp sLRSvcImp0 = new SLRSvcImp(aCMSLRMapper0, iEEESLRMapper0);
      PaperVO paperVO0 = new PaperVO(1694, "ACM", (String) null, "com.nju.svcrecommend.domain.PaperVO", "", 0, 2749, arrayList1, "");
      arrayList0.add(paperVO0);
      ResponseVO responseVO0 = sLRSvcImp0.getSLRRecommend("", 1, 1, 1602, (-2817), 617);
      assertNull(responseVO0.getMessage());
  }
}
