/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 31 13:29:37 GMT 2020
 */

package com.nju.svcdisambiguation.serviceImp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nju.svcdisambiguation.dataMapper.acm.ACMSearchMapper;
import com.nju.svcdisambiguation.dataMapper.ieee.IEEESearchMapper;
import com.nju.svcdisambiguation.po.acm.ACMPaperPO;
import com.nju.svcdisambiguation.po.ieee.IEEEPaperPO;
import com.nju.svcdisambiguation.serviceImp.SearchServiceImp;
import com.nju.svcdisambiguation.vo.ResponseVO;
import com.nju.svcdisambiguation.vo.search.AuthorSearchResultVO;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class SearchServiceImp_ESTest extends SearchServiceImp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      ArrayList<ACMPaperPO> arrayList1 = new ArrayList<ACMPaperPO>();
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(aCMSearchMapper0).selectACMPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      ResponseVO responseVO0 = searchServiceImp0.searchByAuthorName("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", 0, 0, 0, (-946), (-764));
      assertNull(responseVO0.getMessage());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      ArrayList<ACMPaperPO> arrayList1 = new ArrayList<ACMPaperPO>();
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(aCMSearchMapper0).selectACMPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      ResponseVO responseVO0 = searchServiceImp0.searchByAuthorName("|[2", (-2692220), 0, (-1134), 0, 0);
      assertNull(responseVO0.getMessage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      // Undeclared exception!
      try { 
        searchServiceImp0.searchByInstitutionName("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", 1, 1, 1, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      String string0 = "com.nju.svcdisambiguation.vo.search.AuthorSearchResultVO";
      int int0 = (-2032);
      int int1 = 0;
      String string1 = "com.nju.svcdisambiguation.vo.ResponseVO";
      int int2 = 0;
      int int3 = (-970);
      int int4 = (-1);
      String string2 = "";
      // Undeclared exception!
      try { 
        searchServiceImp0.searchByInstitutionName("com.nju.svcdisambiguation.vo.ResponseVO", (-1), (-970), (-2032), 1, (-970));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      ArrayList<ACMPaperPO> arrayList1 = new ArrayList<ACMPaperPO>();
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(aCMSearchMapper0).selectACMAuthorPOByDocId(anyInt());
      doReturn(arrayList1).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      doReturn((Integer) null).when(aCMSearchMapper0).selectCitationsCountByDocId(anyInt());
      doReturn((String) null).when(aCMSearchMapper0).selectKeywordsByDocId(anyInt());
      ACMPaperPO aCMPaperPO0 = new ACMPaperPO();
      arrayList1.add(aCMPaperPO0);
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      // Undeclared exception!
      try { 
        searchServiceImp0.searchByInstitutionName("ACM", (-349), (-349), 869556, 869556, (-349));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      ArrayList<ACMPaperPO> arrayList1 = new ArrayList<ACMPaperPO>();
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      ResponseVO responseVO0 = searchServiceImp0.searchByInstitutionName("", 1, 1, 0, 2016, 2016);
      assertTrue(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      ArrayList<AuthorSearchResultVO> arrayList1 = new ArrayList<AuthorSearchResultVO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(iEEESearchMapper0).selectIEEEAuthorPOByDocId(anyInt());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      IEEEPaperPO iEEEPaperPO0 = new IEEEPaperPO(22, "8A`T", "8A`T", "8A`T", "8A`T", 22, 22);
      arrayList0.add(iEEEPaperPO0);
      ArrayList<ACMPaperPO> arrayList2 = new ArrayList<ACMPaperPO>();
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList2).when(aCMSearchMapper0).selectACMPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      // Undeclared exception!
      try { 
        searchServiceImp0.searchByAuthorName("8A`T", 22, 22, 22, 22, 22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 462, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp((IEEESearchMapper) null, aCMSearchMapper0);
      // Undeclared exception!
      try { 
        searchServiceImp0.searchByAuthorName("", 1, (-1624), 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", e);
      }
  }
}
