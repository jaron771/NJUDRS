/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 08:29:25 GMT 2020
 */

package com.nju.svcdisambiguation.serviceImp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nju.svcdisambiguation.dataMapper.acm.ACMAuthorDetailMapper;
import com.nju.svcdisambiguation.dataMapper.ieee.IEEEAuthorDetailMapper;
import com.nju.svcdisambiguation.po.FieldSummaryPO;
import com.nju.svcdisambiguation.po.PaperActivationPO;
import com.nju.svcdisambiguation.serviceImp.AuthorDetailServiceImp;
import com.nju.svcdisambiguation.vo.ResponseVO;
import com.nju.svcdisambiguation.vo.detail.ReferenceVO;
import com.nju.svcdisambiguation.vo.detail.author.AuthorDetailVO;
import com.nju.svcdisambiguation.vo.detail.author.AuthorPublicationSummaryVO;
import com.nju.svcdisambiguation.vo.detail.author.InstitutionAuthorDetailVO;
import com.nju.svcdisambiguation.vo.detail.author.KeywordsAuthorDetailVO;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class AuthorDetailServiceImp_ESTest extends AuthorDetailServiceImp_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00()  throws Throwable  {
        Integer integer0 = new Integer((-1125));
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(integer0).when(iEEEAuthorDetailMapper0).selectAuthorReferred(anyInt());
        doReturn(integer0).when(iEEEAuthorDetailMapper0).selectDocCnt(anyInt());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorInfluence(0, "");
        assertNull(responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test01()  throws Throwable  {
        Integer integer0 = new Integer(66);
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        Integer integer1 = new Integer(1);
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(integer0).when(aCMAuthorDetailMapper0).selectAuthorReferred(anyInt());
        doReturn(integer1).when(aCMAuthorDetailMapper0).selectDocCnt(anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorInfluence(0, "ACM");
        assertTrue(responseVO0.getSuccess());
    }

    @Test(timeout = 4000)
    public void test02()  throws Throwable  {
        ArrayList<KeywordsAuthorDetailVO> arrayList0 = new ArrayList<KeywordsAuthorDetailVO>();
        ArrayList<KeywordsAuthorDetailVO> arrayList1 = new ArrayList<KeywordsAuthorDetailVO>();
        AuthorDetailVO authorDetailVO0 = mock(AuthorDetailVO.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList0).when(authorDetailVO0).getFieldList();
        ArrayList<AuthorPublicationSummaryVO> arrayList2 = new ArrayList<AuthorPublicationSummaryVO>();
        ArrayList<FieldSummaryPO> arrayList3 = new ArrayList<FieldSummaryPO>();
        ArrayList<InstitutionAuthorDetailVO> arrayList4 = new ArrayList<InstitutionAuthorDetailVO>();
        Integer integer0 = new Integer((-1));
        ArrayList<PaperActivationPO> arrayList5 = new ArrayList<PaperActivationPO>();
        ReferenceVO referenceVO0 = new ReferenceVO();
        referenceVO0.getAuthors();
        ReferenceVO referenceVO1 = new ReferenceVO(1638, "IEEE", "IEEE", "{tj5D!\";t<", (-1), (ArrayList<String>) null, (ArrayList<String>) null);
        KeywordsAuthorDetailVO keywordsAuthorDetailVO0 = new KeywordsAuthorDetailVO(346, "$f!ru<8}KSh=L", 0.0, (-1434859597));
        arrayList0.add(keywordsAuthorDetailVO0);
        referenceVO1.getKeywords();
        AuthorDetailVO authorDetailVO1 = mock(AuthorDetailVO.class, new ViolatedAssumptionAnswer());
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(authorDetailVO0).when(iEEEAuthorDetailMapper0).selectAuthorDetailById(anyInt());
        doReturn(integer0).when(iEEEAuthorDetailMapper0).selectDocCountByAuthorId(anyInt());
        doReturn(arrayList4).when(iEEEAuthorDetailMapper0).selectInstitutionByAuthorId(anyInt());
        doReturn(arrayList0).when(iEEEAuthorDetailMapper0).selectKeywordsAuthorDetailByAuthorId(anyInt());
        doReturn(arrayList5).when(iEEEAuthorDetailMapper0).selectPaperActivationPOByAuthorId(anyInt());
        doReturn((ArrayList<String>) null).when(iEEEAuthorDetailMapper0).selectSameAuthorsByAuthorId(anyInt());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn((ArrayList) null).when(aCMAuthorDetailMapper0).selectPAVOByFieldNameAndAuthorId(anyString() , anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        // Undeclared exception!
        try {
            authorDetailServiceImp0.getAuthorDetail(1652, "{iYc*OX5m.l~)");
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.nju.svcdisambiguation.serviceImp.AuthorDetailServiceImp", e);
        }
    }

    @Test(timeout = 4000)
    public void test03()  throws Throwable  {
        ArrayList<ReferenceVO> arrayList0 = new ArrayList<ReferenceVO>();
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList0).when(iEEEAuthorDetailMapper0).selectReferenceVOByAuthorId(anyInt() , anyInt() , anyInt());
        doReturn((Integer) null).when(iEEEAuthorDetailMapper0).selectReferenceVONumByAuthorId(anyInt());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        // Undeclared exception!
        try {
            authorDetailServiceImp0.getAuthorRefer(863, "^P&o;.WA6hxg|8-3", (-4342), (-4342));
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.nju.svcdisambiguation.serviceImp.AuthorDetailServiceImp", e);
        }
    }

    @Test(timeout = 4000)
    public void test04()  throws Throwable  {
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp((IEEEAuthorDetailMapper) null, aCMAuthorDetailMapper0);
        // Undeclared exception!
        try {
            authorDetailServiceImp0.getAuthorPublicationSummary((-298), "");
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.nju.svcdisambiguation.serviceImp.AuthorDetailServiceImp", e);
        }
    }

    @Test(timeout = 4000)
    public void test05()  throws Throwable  {
        Integer integer0 = new Integer(0);
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(integer0).when(iEEEAuthorDetailMapper0).selectAuthorReferred(anyInt());
        doReturn(integer0).when(iEEEAuthorDetailMapper0).selectDocCnt(anyInt());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorInfluence(0, " x");
        assertNull(responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test06()  throws Throwable  {
        AuthorDetailVO authorDetailVO0 = mock(AuthorDetailVO.class, new ViolatedAssumptionAnswer());
        ArrayList<InstitutionAuthorDetailVO> arrayList0 = new ArrayList<InstitutionAuthorDetailVO>();
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(authorDetailVO0).when(iEEEAuthorDetailMapper0).selectAuthorDetailById(anyInt());
        doReturn(arrayList0).when(iEEEAuthorDetailMapper0).selectInstitutionByAuthorId(anyInt());
        doReturn((ArrayList) null).when(iEEEAuthorDetailMapper0).selectPaperActivationPOByAuthorId(anyInt());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        InstitutionAuthorDetailVO institutionAuthorDetailVO0 = new InstitutionAuthorDetailVO();
        arrayList0.add(institutionAuthorDetailVO0);
        // Undeclared exception!
        try {
            authorDetailServiceImp0.getAuthorDetail(2842, "");
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.nju.svcdisambiguation.serviceImp.AuthorDetailServiceImp", e);
        }
    }

    @Test(timeout = 4000)
    public void test07()  throws Throwable  {
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn((Integer) null).when(iEEEAuthorDetailMapper0).selectDocCnt(anyInt());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        // Undeclared exception!
        try {
            authorDetailServiceImp0.getAuthorInfluence((-1880944175), "F;_p+)7ILfSA;{[]");
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.nju.svcdisambiguation.serviceImp.AuthorDetailServiceImp", e);
        }
    }

    @Test(timeout = 4000)
    public void test08()  throws Throwable  {
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn((Integer) null).when(aCMAuthorDetailMapper0).selectAuthorReferred(anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        // Undeclared exception!
        try {
            authorDetailServiceImp0.getAuthorReferred((-1), "ACM");
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.nju.svcdisambiguation.serviceImp.AuthorDetailServiceImp", e);
        }
    }

    @Test(timeout = 4000)
    public void test09()  throws Throwable  {
        Integer integer0 = new Integer(104);
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(integer0).when(iEEEAuthorDetailMapper0).selectAuthorReferred(anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, (ACMAuthorDetailMapper) null);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorReferred(1, "~oCHIq.5");
        assertNull(responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test10()  throws Throwable  {
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        ArrayList<ReferenceVO> arrayList0 = new ArrayList<ReferenceVO>();
        ReferenceVO referenceVO0 = new ReferenceVO(1779, "com.nju.svcdisambiguation.vo.detail.author.AuthorReferredVO", "com.nju.svcdisambiguation.vo.detail.author.AuthorReferredVO", "com.nju.svcdisambiguation.vo.detail.author.AuthorReferredVO", (-2098791887), (ArrayList<String>) null, (ArrayList<String>) null);
        arrayList0.add(referenceVO0);
        Integer integer0 = new Integer((-1818));
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn((ArrayList<String>) null).when(aCMAuthorDetailMapper0).selectAuthorsByPaperId(anyInt());
        doReturn((ArrayList<String>) null).when(aCMAuthorDetailMapper0).selectKeywordsByPaperId(anyInt());
        doReturn(arrayList0).when(aCMAuthorDetailMapper0).selectReferenceVOByAuthorId(anyInt() , anyInt() , anyInt());
        doReturn(integer0).when(aCMAuthorDetailMapper0).selectReferenceVONumByAuthorId(anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorRefer((-2052), "ACM", (-2052), 2875);
        assertEquals("-1818", responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test11()  throws Throwable  {
        Integer integer0 = new Integer(3187);
        ArrayList<ReferenceVO> arrayList0 = new ArrayList<ReferenceVO>();
        ReferenceVO referenceVO0 = new ReferenceVO();
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn((ArrayList<String>) null).when(iEEEAuthorDetailMapper0).selectAuthorsByPaperId(anyInt());
        doReturn((ArrayList<String>) null).when(iEEEAuthorDetailMapper0).selectKeywordsByPaperId(anyInt());
        doReturn(arrayList0).when(iEEEAuthorDetailMapper0).selectReferenceVOByAuthorId(anyInt() , anyInt() , anyInt());
        doReturn(integer0).when(iEEEAuthorDetailMapper0).selectReferenceVONumByAuthorId(anyInt());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        arrayList0.add(referenceVO0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorRefer((-309), "-N`", (-1101565236), (-1101565236));
        assertEquals("3187", responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test12()  throws Throwable  {
        Integer integer0 = new Integer(3152);
        ArrayList<ReferenceVO> arrayList0 = new ArrayList<ReferenceVO>();
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList0).when(aCMAuthorDetailMapper0).selectReferenceVOByAuthorId(anyInt() , anyInt() , anyInt());
        doReturn(integer0).when(aCMAuthorDetailMapper0).selectReferenceVONumByAuthorId(anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorRefer((-3403), "ACM", (-3111), 188);
        assertEquals("3152", responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test13()  throws Throwable  {
        Integer integer0 = new Integer(104);
        ArrayList<ReferenceVO> arrayList0 = new ArrayList<ReferenceVO>();
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList0).when(iEEEAuthorDetailMapper0).selectReferenceVOByAuthorId(anyInt() , anyInt() , anyInt());
        doReturn(integer0).when(iEEEAuthorDetailMapper0).selectReferenceVONumByAuthorId(anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, (ACMAuthorDetailMapper) null);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorRefer((-1181), ":tBlQTMwo!#WU={", (-1444180609), (-1181));
        assertTrue(responseVO0.getSuccess());
    }

    @Test(timeout = 4000)
    public void test14()  throws Throwable  {
        ArrayList<FieldSummaryPO> arrayList0 = new ArrayList<FieldSummaryPO>();
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList0).when(iEEEAuthorDetailMapper0).selectFieldSummaryPOByAuthorId(anyInt());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        FieldSummaryPO fieldSummaryPO0 = new FieldSummaryPO();
        arrayList0.add(fieldSummaryPO0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorFieldSummary(1, "](W");
        assertNull(responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test15()  throws Throwable  {
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        ArrayList<FieldSummaryPO> arrayList0 = new ArrayList<FieldSummaryPO>();
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList0).when(aCMAuthorDetailMapper0).selectFieldSummaryPOByAuthorId(anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        FieldSummaryPO fieldSummaryPO0 = new FieldSummaryPO();
        arrayList0.add(fieldSummaryPO0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorFieldSummary((-2052), "ACM");
        assertTrue(responseVO0.getSuccess());
    }

    @Test(timeout = 4000)
    public void test16()  throws Throwable  {
        ArrayList<AuthorPublicationSummaryVO> arrayList0 = new ArrayList<AuthorPublicationSummaryVO>();
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn((ArrayList) null).when(aCMAuthorDetailMapper0).selectAuthorPublicationSummaryByAuthorId(anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorPublicationSummary((-96), "ACM");
        assertNull(responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test17()  throws Throwable  {
        ArrayList<KeywordsAuthorDetailVO> arrayList0 = new ArrayList<KeywordsAuthorDetailVO>();
        AuthorDetailVO authorDetailVO0 = mock(AuthorDetailVO.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList0).when(authorDetailVO0).getFieldList();
        ArrayList<InstitutionAuthorDetailVO> arrayList1 = new ArrayList<InstitutionAuthorDetailVO>();
        Integer integer0 = new Integer(1);
        ArrayList<PaperActivationPO> arrayList2 = new ArrayList<PaperActivationPO>();
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(authorDetailVO0).when(iEEEAuthorDetailMapper0).selectAuthorDetailById(anyInt());
        doReturn(integer0).when(iEEEAuthorDetailMapper0).selectDocCountByAuthorId(anyInt());
        doReturn(arrayList1).when(iEEEAuthorDetailMapper0).selectInstitutionByAuthorId(anyInt());
        doReturn(arrayList0).when(iEEEAuthorDetailMapper0).selectKeywordsAuthorDetailByAuthorId(anyInt());
        doReturn(arrayList2).when(iEEEAuthorDetailMapper0).selectPaperActivationPOByAuthorId(anyInt());
        doReturn((ArrayList<String>) null).when(iEEEAuthorDetailMapper0).selectSameAuthorsByAuthorId(anyInt());
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        PaperActivationPO paperActivationPO0 = new PaperActivationPO((-2109876870), (-2168), (-1));
        arrayList2.add(paperActivationPO0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorDetail(1652, "{iYc*OX5m.l~)");
        assertNull(responseVO0.getMessage());
    }

    @Test(timeout = 4000)
    public void test18()  throws Throwable  {
        ArrayList<KeywordsAuthorDetailVO> arrayList0 = new ArrayList<KeywordsAuthorDetailVO>();
        ArrayList<InstitutionAuthorDetailVO> arrayList1 = new ArrayList<InstitutionAuthorDetailVO>();
        Integer integer0 = new Integer(66);
        ArrayList<PaperActivationPO> arrayList2 = new ArrayList<PaperActivationPO>();
        ArrayList<String> arrayList3 = new ArrayList<String>();
        IEEEAuthorDetailMapper iEEEAuthorDetailMapper0 = mock(IEEEAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailVO authorDetailVO0 = mock(AuthorDetailVO.class, new ViolatedAssumptionAnswer());
        doReturn(arrayList0).when(authorDetailVO0).getFieldList();
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        doReturn(authorDetailVO0).when(aCMAuthorDetailMapper0).selectAuthorDetailById(anyInt());
        doReturn(integer0).when(aCMAuthorDetailMapper0).selectDocCountByAuthorId(anyInt());
        doReturn(arrayList1).when(aCMAuthorDetailMapper0).selectInstitutionByAuthorId(anyInt());
        doReturn(arrayList0).when(aCMAuthorDetailMapper0).selectKeywordsAuthorDetailByAuthorId(anyInt());
        doReturn(arrayList2).when(aCMAuthorDetailMapper0).selectPaperActivationPOByAuthorId(anyInt());
        doReturn(arrayList3).when(aCMAuthorDetailMapper0).selectSameAuthorsByAuthorId(anyInt());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp(iEEEAuthorDetailMapper0, aCMAuthorDetailMapper0);
        ResponseVO responseVO0 = authorDetailServiceImp0.getAuthorDetail(1, "ACM");
        assertTrue(responseVO0.getSuccess());
    }

    @Test(timeout = 4000)
    public void test19()  throws Throwable  {
        ACMAuthorDetailMapper aCMAuthorDetailMapper0 = mock(ACMAuthorDetailMapper.class, new ViolatedAssumptionAnswer());
        AuthorDetailServiceImp authorDetailServiceImp0 = new AuthorDetailServiceImp((IEEEAuthorDetailMapper) null, aCMAuthorDetailMapper0);
        // Undeclared exception!
        try {
            authorDetailServiceImp0.getAuthorFieldSummary(1, "com.nju.svcdisambiguation.vo.detail.ReferenceVO");
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.nju.svcdisambiguation.serviceImp.AuthorDetailServiceImp", e);
        }
    }
}
