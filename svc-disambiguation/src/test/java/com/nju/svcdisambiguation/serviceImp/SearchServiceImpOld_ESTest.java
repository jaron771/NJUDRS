/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 29 09:57:48 GMT 2020
 */

package com.nju.svcdisambiguation.serviceImp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nju.svcdisambiguation.dataMapper.acm.ACMSearchMapper;
import com.nju.svcdisambiguation.dataMapper.ieee.IEEESearchMapper;
import com.nju.svcdisambiguation.po.acm.ACMPaperPO;
import com.nju.svcdisambiguation.po.ieee.IEEEPaperPO;
import com.nju.svcdisambiguation.serviceImp.SearchServiceImpOld;
import com.nju.svcdisambiguation.vo.ResponseVO;
import com.nju.svcdisambiguation.vo.search.AuthorSearchResultVO;
import com.nju.svcdisambiguation.vo.search.DocumentSearchResultVO;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class SearchServiceImpOld_ESTest extends SearchServiceImpOld_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      // Undeclared exception!
      try { 
        searchServiceImpOld0.searchByInstitutionName("", 0, 2030, 0, (-1718), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImpOld", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      ArrayList<ACMPaperPO> arrayList1 = new ArrayList<ACMPaperPO>();
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(aCMSearchMapper0).selectACMPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      ResponseVO responseVO0 = searchServiceImpOld0.searchByAuthorName("r.{A6!Y$:@?B", 0, (-1492), 0, 2070, 0);
      assertNull(responseVO0.getMessage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(iEEESearchMapper0).selectIEEEPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      // Undeclared exception!
      try { 
        searchServiceImpOld0.searchByAuthorName("lM2L|(4P-B", 0, 0, 0, 849, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImpOld", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      ArrayList<ACMPaperPO> arrayList1 = new ArrayList<ACMPaperPO>();
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      // Undeclared exception!
      try { 
        searchServiceImpOld0.searchByInstitutionName("", (-3360), 2275, 4378556, (-1), (-12434175));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7646275
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(iEEESearchMapper0).selectIEEEPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      String string0 = "r1oYE*lVr!";
      int int0 = 1;
      int int1 = 3351;
      // Undeclared exception!
      try { 
        searchServiceImpOld0.searchByAuthorName("r1oYE*lVr!", 1, 1, 3351, 1, 3351);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImpOld", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(iEEESearchMapper0).selectIEEEPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      int int0 = (-1);
      int int1 = (-273);
      // Undeclared exception!
      try { 
        searchServiceImpOld0.searchByAuthorName("com.nju.svcdisambiguation.vo.ResponseVO", 0, 1, (-1), 1, (-273));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImpOld", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      ArrayList<ACMPaperPO> arrayList1 = new ArrayList<ACMPaperPO>();
      ACMPaperPO aCMPaperPO0 = new ACMPaperPO();
      arrayList1.add(aCMPaperPO0);
      DocumentSearchResultVO documentSearchResultVO0 = new DocumentSearchResultVO();
      ArrayList<AuthorSearchResultVO> arrayList2 = documentSearchResultVO0.getAuthors();
      Integer integer0 = new Integer((-16395660));
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList2).when(aCMSearchMapper0).selectACMAuthorPOByDocId(anyInt());
      doReturn(arrayList1).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      doReturn(integer0).when(aCMSearchMapper0).selectCitationsCountByDocId(anyInt());
      doReturn("v_kx<[Nh[a,D|&lG").when(aCMSearchMapper0).selectKeywordsByDocId(anyInt());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      ResponseVO responseVO0 = searchServiceImpOld0.searchByInstitutionName("aq", 1, 1381, 0, 0, 1);
      assertTrue(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      ArrayList<ACMPaperPO> arrayList1 = new ArrayList<ACMPaperPO>();
      ACMPaperPO aCMPaperPO0 = new ACMPaperPO();
      arrayList1.add(aCMPaperPO0);
      DocumentSearchResultVO documentSearchResultVO0 = new DocumentSearchResultVO();
      ArrayList<AuthorSearchResultVO> arrayList2 = documentSearchResultVO0.getAuthors();
      Integer integer0 = new Integer((-16395660));
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList2).when(aCMSearchMapper0).selectACMAuthorPOByDocId(anyInt());
      doReturn(arrayList1).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      doReturn(integer0).when(aCMSearchMapper0).selectCitationsCountByDocId(anyInt());
      doReturn("v_kx<[Nh[a,D|&lG").when(aCMSearchMapper0).selectKeywordsByDocId(anyInt());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      ResponseVO responseVO0 = searchServiceImpOld0.searchByInstitutionName("!XN", 0, 0, 0, (-1), 1);
      assertTrue(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      ArrayList<ACMPaperPO> arrayList1 = new ArrayList<ACMPaperPO>();
      ACMPaperPO aCMPaperPO0 = new ACMPaperPO();
      arrayList1.add(aCMPaperPO0);
      DocumentSearchResultVO documentSearchResultVO0 = new DocumentSearchResultVO();
      ArrayList<AuthorSearchResultVO> arrayList2 = documentSearchResultVO0.getAuthors();
      Integer integer0 = new Integer((-16395660));
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList2).when(aCMSearchMapper0).selectACMAuthorPOByDocId(anyInt());
      doReturn(arrayList1).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      doReturn(integer0).when(aCMSearchMapper0).selectCitationsCountByDocId(anyInt());
      doReturn("v_kx<[Nh[a,D|&lG").when(aCMSearchMapper0).selectKeywordsByDocId(anyInt());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      ResponseVO responseVO0 = searchServiceImpOld0.searchByInstitutionName("v_kx<[Nh[a,D|&lG", 1381, 0, 1381, 1381, 1381);
      assertNull(responseVO0.getMessage());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ArrayList<IEEEPaperPO> arrayList0 = new ArrayList<IEEEPaperPO>();
      ArrayList<AuthorSearchResultVO> arrayList1 = new ArrayList<AuthorSearchResultVO>();
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(iEEESearchMapper0).selectIEEEAuthorPOByDocId(anyInt());
      doReturn(arrayList0).when(iEEESearchMapper0).selectIEEEPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      ArrayList<ACMPaperPO> arrayList2 = new ArrayList<ACMPaperPO>();
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList2).when(aCMSearchMapper0).selectACMPaperPOByAuthorName(anyString() , anyInt() , anyInt());
      SearchServiceImpOld searchServiceImpOld0 = new SearchServiceImpOld(iEEESearchMapper0, aCMSearchMapper0);
      IEEEPaperPO iEEEPaperPO0 = new IEEEPaperPO();
      arrayList0.add(iEEEPaperPO0);
      ResponseVO responseVO0 = searchServiceImpOld0.searchByAuthorName("0ggfgB9'B3,1o4", 1, 1, 1, 1, 1);
      assertNull(responseVO0.getMessage());
  }
}
