/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 31 13:34:25 GMT 2020
 */

package com.nju.svcdisambiguation.controller;

import com.nju.svcdisambiguation.service.PaperDetailService;
import com.nju.svcdisambiguation.service.SearchService;
import com.nju.svcdisambiguation.vo.ResponseVO;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nju.svcdisambiguation.controller.SearchController;
import com.nju.svcdisambiguation.dataMapper.acm.ACMSearchMapper;
import com.nju.svcdisambiguation.dataMapper.ieee.IEEESearchMapper;
import com.nju.svcdisambiguation.serviceImp.SearchServiceImp;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class SearchController_ESTest extends SearchController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      SearchController searchController0 = new SearchController(searchServiceImp0);
      // Undeclared exception!
      try { 
        searchController0.searchByInstitutionName("c6v-~}J", 0, 0, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      SearchController searchController0 = new SearchController(searchServiceImp0);
      // Undeclared exception!
      try { 
        searchController0.searchByInstitutionName((String) null, 1, 2334, 2334, (-3134), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IEEESearchMapper iEEESearchMapper0 = mock(IEEESearchMapper.class, new ViolatedAssumptionAnswer());
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(aCMSearchMapper0).selectACMPaperPOByInstitutionName(anyString() , anyInt() , anyInt());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp(iEEESearchMapper0, aCMSearchMapper0);
      SearchController searchController0 = new SearchController(searchServiceImp0);
      int int0 = (-524);
      int int1 = 2528;
      // Undeclared exception!
      try { 
        searchController0.searchByInstitutionName("", (-524), 2528, (-524), 1, (-524));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ACMSearchMapper aCMSearchMapper0 = mock(ACMSearchMapper.class, new ViolatedAssumptionAnswer());
      SearchServiceImp searchServiceImp0 = new SearchServiceImp((IEEESearchMapper) null, aCMSearchMapper0);
      SearchController searchController0 = new SearchController(searchServiceImp0);
      // Undeclared exception!
      try { 
        searchController0.searchByAuthorName("{i&Yk?Xy~qiK!YZfwM", 994, (-2551), 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcdisambiguation.serviceImp.SearchServiceImp", e);
      }
  }

    @Test(timeout = 4000)
    public void test5()  throws Throwable  {
        SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
        doReturn((ResponseVO) null).when(searchService0).searchByInstitutionName(anyString(),anyInt(),anyInt(),anyInt(),anyInt(),anyInt());
        SearchController searchController0 = new SearchController(searchService0);
        ResponseVO responseVO0 = searchController0.searchByInstitutionName( "",1,1,1,1,1);
        assertNull(responseVO0);
    }

    @Test(timeout = 4000)
    public void test6()  throws Throwable  {
        SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
        doReturn((ResponseVO) null).when(searchService0).searchByAuthorName(anyString(),anyInt(),anyInt(),anyInt(),anyInt(),anyInt());
        SearchController searchController0 = new SearchController(searchService0);
        ResponseVO responseVO0 = searchController0.searchByAuthorName( "",1,1,1,1,1);
        assertNull(responseVO0);
    }
}
