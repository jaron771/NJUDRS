/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 01 06:11:55 GMT 2020
 */

package com.nju.svcprediction.serviceImp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nju.svcprediction.dataMapper.acm.ACMInterestMapper;
import com.nju.svcprediction.dataMapper.ieee.IEEEInterestMapper;
import com.nju.svcprediction.domain.Author;
import com.nju.svcprediction.domain.Document;
import com.nju.svcprediction.domain.InterestRes;
import com.nju.svcprediction.domain.ResponseVO;
import com.nju.svcprediction.serviceImp.InterestSvcImp;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class InterestSvcImp_ESTest extends InterestSvcImp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      ArrayList<InterestRes> arrayList0 = new ArrayList<InterestRes>();
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEEInterestMapper0).getInterestHistoryByAuthorId(anyInt());
      doReturn("com.nju.svcprediction.domain.InterestRes").when(iEEEInterestMapper0).getInterestPrediction(anyInt() , anyInt());
      InterestRes interestRes0 = new InterestRes();
      interestRes0.setYear((-2448));
      arrayList0.add(interestRes0);
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      InterestRes interestRes1 = new InterestRes();
      arrayList0.add(interestRes1);
      ResponseVO responseVO0 = interestSvcImp0.getFutureKeywords((-22), "&vyaL/mHy&N|");
      assertNull(responseVO0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(iEEEInterestMapper0).getInterestHistoryByAuthorId(anyInt());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      // Undeclared exception!
      try { 
        interestSvcImp0.getHistoryKeywords(0, "R?yPb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcprediction.serviceImp.InterestSvcImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      ArrayList<Document> arrayList0 = new ArrayList<Document>();
      Document document0 = new Document();
      arrayList0.add(document0);
      // Undeclared exception!
      try { 
        interestSvcImp0.getFutureKeywords(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcprediction.serviceImp.InterestSvcImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, (IEEEInterestMapper) null);
      // Undeclared exception!
      try { 
        interestSvcImp0.getFutureKeywords(1085, "M7$(4V#q?aP,_\"S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcprediction.serviceImp.InterestSvcImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      ArrayList<Document> arrayList0 = new ArrayList<Document>();
      ArrayList<Author> arrayList1 = new ArrayList<Author>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("Xscqq.]EYOg*0a<2 ");
      arrayList2.add("");
      Document document0 = new Document("", "C]p\"ULZ~/>e'& &6", 0, arrayList1, arrayList2);
      arrayList0.add(document0);
      InterestRes interestRes0 = interestSvcImp0.getFutureKeywords(arrayList0);
      assertEquals(1, interestRes0.getYear());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      ArrayList<Document> arrayList0 = new ArrayList<Document>();
      Document document0 = new Document();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("Go=>");
      arrayList1.add("Go=>");
      document0.setKeywords(arrayList1);
      arrayList0.add(document0);
      InterestRes interestRes0 = interestSvcImp0.getFutureKeywords(arrayList0);
      assertEquals("Go=>", interestRes0.getWord());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      ArrayList<Document> arrayList0 = new ArrayList<Document>();
      ArrayList<Author> arrayList1 = new ArrayList<Author>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Document document0 = new Document("", "C]p\"ULZ~/>e'& &6", 0, arrayList1, arrayList2);
      arrayList0.add(document0);
      document0.setYear((-479));
      InterestRes interestRes0 = interestSvcImp0.getFutureKeywords(arrayList0);
      assertEquals(0, interestRes0.getYear());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      ArrayList<Document> arrayList0 = new ArrayList<Document>();
      ArrayList<Author> arrayList1 = new ArrayList<Author>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Document document0 = new Document("", "C]p\"ULZ~/>e'& &6", 0, arrayList1, arrayList2);
      arrayList0.add(document0);
      arrayList0.add(document0);
      InterestRes interestRes0 = interestSvcImp0.getFutureKeywords(arrayList0);
      assertEquals(1, interestRes0.getYear());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<InterestRes> arrayList0 = new ArrayList<InterestRes>();
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(aCMInterestMapper0).getInterestHistoryByAuthorId(anyInt());
      doReturn("Vh4b1/?!4,>FE").when(aCMInterestMapper0).getInterestPrediction(anyInt() , anyInt());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, (IEEEInterestMapper) null);
      ArrayList<Document> arrayList1 = new ArrayList<Document>();
      InterestRes interestRes0 = interestSvcImp0.getFutureKeywords(arrayList1);
      arrayList0.add(interestRes0);
      ResponseVO responseVO0 = interestSvcImp0.getFutureKeywords(885, "ACM");
      assertTrue(responseVO0.getSuccess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<InterestRes> arrayList0 = new ArrayList<InterestRes>();
      InterestRes interestRes0 = new InterestRes((-1), "%CWx*Y");
      arrayList0.add(interestRes0);
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEEInterestMapper0).getInterestHistoryByAuthorId(anyInt());
      doReturn("W[=.Gi7ep5S").when(iEEEInterestMapper0).getInterestPrediction(anyInt() , anyInt());
      InterestRes interestRes1 = new InterestRes();
      arrayList0.add(interestRes1);
      InterestSvcImp interestSvcImp0 = new InterestSvcImp((ACMInterestMapper) null, iEEEInterestMapper0);
      interestSvcImp0.getFutureKeywords(1175, "W[=.Gi7ep5S");
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<InterestRes> arrayList0 = new ArrayList<InterestRes>();
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(aCMInterestMapper0).getInterestHistoryByAuthorId(anyInt());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, (IEEEInterestMapper) null);
      ArrayList<Document> arrayList1 = new ArrayList<Document>();
      InterestRes interestRes0 = interestSvcImp0.getFutureKeywords(arrayList1);
      arrayList0.add(interestRes0);
      arrayList0.add(interestRes0);
      interestSvcImp0.getHistoryKeywords(1085, "ACM");
      assertEquals(2, arrayList0.size());
  }

}
