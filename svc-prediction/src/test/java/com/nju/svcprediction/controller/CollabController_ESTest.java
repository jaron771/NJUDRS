/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 01 06:16:49 GMT 2020
 */

package com.nju.svcprediction.controller;

import com.nju.svcprediction.service.CollabSvc;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nju.svcprediction.controller.CollabController;
import com.nju.svcprediction.dataMapper.acm.ACMCollabMapper;
import com.nju.svcprediction.dataMapper.acm.ACMInterestMapper;
import com.nju.svcprediction.dataMapper.ieee.IEEECollabMapper;
import com.nju.svcprediction.dataMapper.ieee.IEEEInterestMapper;
import com.nju.svcprediction.domain.Document;
import com.nju.svcprediction.domain.EdgePO;
import com.nju.svcprediction.domain.InterestRes;
import com.nju.svcprediction.domain.ResponseVO;
import com.nju.svcprediction.domain.VeticleContent;
import com.nju.svcprediction.service.InterestSvc;
import com.nju.svcprediction.serviceImp.CollabSvcImp;
import com.nju.svcprediction.serviceImp.InterestSvcImp;
import java.util.ArrayList;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class CollabController_ESTest extends CollabController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ACMCollabMapper aCMCollabMapper0 = mock(ACMCollabMapper.class, new ViolatedAssumptionAnswer());
      ArrayList<EdgePO> arrayList0 = new ArrayList<EdgePO>();
      IEEECollabMapper iEEECollabMapper0 = mock(IEEECollabMapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(iEEECollabMapper0).getAuthorName(anyInt());
      doReturn(arrayList0).when(iEEECollabMapper0).getEdgesByAuthorId(anyInt());
      doReturn((VeticleContent) null, (VeticleContent) null).when(iEEECollabMapper0).getVeticleContent(anyInt());
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      EdgePO edgePO0 = mock(EdgePO.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgePO0).getCommonWorks();
      doReturn(0).when(edgePO0).getV1();
      doReturn(0).when(edgePO0).getV2();
      arrayList0.add(edgePO0);
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      CollabSvcImp collabSvcImp0 = new CollabSvcImp(aCMCollabMapper0, iEEECollabMapper0, interestSvcImp0);
      CollabController collabController0 = new CollabController(collabSvcImp0);
      ResponseVO responseVO0 = collabController0.getCollaborateMap(0, "com.nju.svcprediction.controller.CollabController");
      assertNull(responseVO0.getMessage());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ACMCollabMapper aCMCollabMapper0 = mock(ACMCollabMapper.class, new ViolatedAssumptionAnswer());
      IEEECollabMapper iEEECollabMapper0 = mock(IEEECollabMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(iEEECollabMapper0).getFutureCollab(anyString());
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      ArrayList<InterestRes> arrayList0 = new ArrayList<InterestRes>();
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(iEEEInterestMapper0).getInterestHistoryByAuthorId(anyInt());
      doReturn((String) null).when(iEEEInterestMapper0).getInterestPrediction(anyInt() , anyInt());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      CollabSvcImp collabSvcImp0 = new CollabSvcImp(aCMCollabMapper0, iEEECollabMapper0, interestSvcImp0);
      CollabController collabController0 = new CollabController(collabSvcImp0);
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      ArrayList<Document> arrayList1 = new ArrayList<Document>(linkedList0);
      InterestRes interestRes0 = interestSvcImp0.getFutureKeywords(arrayList1);
      arrayList0.add(interestRes0);
      ResponseVO responseVO0 = collabController0.collaboratePrediction((-1500), "");
      assertNull(responseVO0.getMessage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ACMCollabMapper aCMCollabMapper0 = mock(ACMCollabMapper.class, new ViolatedAssumptionAnswer());
      IEEECollabMapper iEEECollabMapper0 = mock(IEEECollabMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList<EdgePO>) null).when(iEEECollabMapper0).getEdgesByAuthorId(anyInt());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp((ACMInterestMapper) null, (IEEEInterestMapper) null);
      CollabSvcImp collabSvcImp0 = new CollabSvcImp(aCMCollabMapper0, iEEECollabMapper0, interestSvcImp0);
      CollabController collabController0 = new CollabController(collabSvcImp0);
      // Undeclared exception!
      try { 
        collabController0.getCollaborateMap((-1111), "\"2)?jL$zsg!=R$`?uw!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcprediction.serviceImp.CollabSvcImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ACMCollabMapper aCMCollabMapper0 = mock(ACMCollabMapper.class, new ViolatedAssumptionAnswer());
      IEEECollabMapper iEEECollabMapper0 = mock(IEEECollabMapper.class, new ViolatedAssumptionAnswer());
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      CollabSvcImp collabSvcImp0 = new CollabSvcImp(aCMCollabMapper0, iEEECollabMapper0, interestSvcImp0);
      CollabController collabController0 = new CollabController(collabSvcImp0);
      // Undeclared exception!
      try { 
        collabController0.collaboratePrediction(167, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcprediction.serviceImp.InterestSvcImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ACMCollabMapper aCMCollabMapper0 = mock(ACMCollabMapper.class, new ViolatedAssumptionAnswer());
      IEEECollabMapper iEEECollabMapper0 = mock(IEEECollabMapper.class, new ViolatedAssumptionAnswer());
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(iEEEInterestMapper0).getInterestHistoryByAuthorId(anyInt());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      CollabSvcImp collabSvcImp0 = new CollabSvcImp(aCMCollabMapper0, iEEECollabMapper0, interestSvcImp0);
      CollabController collabController0 = new CollabController(collabSvcImp0);
      String string0 = "}@c^pCw&4+6Ot1O";
      // Undeclared exception!
      try { 
        collabController0.collaboratePrediction((-2044), "}@c^pCw&4+6Ot1O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcprediction.serviceImp.InterestSvcImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ACMCollabMapper aCMCollabMapper0 = mock(ACMCollabMapper.class, new ViolatedAssumptionAnswer());
      IEEECollabMapper iEEECollabMapper0 = mock(IEEECollabMapper.class, new ViolatedAssumptionAnswer());
      doReturn((ArrayList) null).when(iEEECollabMapper0).getEdgesByAuthorId(anyInt());
      ACMInterestMapper aCMInterestMapper0 = mock(ACMInterestMapper.class, new ViolatedAssumptionAnswer());
      IEEEInterestMapper iEEEInterestMapper0 = mock(IEEEInterestMapper.class, new ViolatedAssumptionAnswer());
      InterestSvcImp interestSvcImp0 = new InterestSvcImp(aCMInterestMapper0, iEEEInterestMapper0);
      CollabSvcImp collabSvcImp0 = new CollabSvcImp(aCMCollabMapper0, iEEECollabMapper0, interestSvcImp0);
      CollabController collabController0 = new CollabController(collabSvcImp0);
      // Undeclared exception!
      try { 
        collabController0.getCollaborateMap(617, "Kg0-i&2{=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcprediction.serviceImp.CollabSvcImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ACMCollabMapper aCMCollabMapper0 = mock(ACMCollabMapper.class, new ViolatedAssumptionAnswer());
      IEEECollabMapper iEEECollabMapper0 = mock(IEEECollabMapper.class, new ViolatedAssumptionAnswer());
      CollabSvcImp collabSvcImp0 = new CollabSvcImp(aCMCollabMapper0, iEEECollabMapper0, (InterestSvc) null);
      CollabController collabController0 = new CollabController(collabSvcImp0);
      ArrayList<Document> arrayList0 = new ArrayList<Document>();
      // Undeclared exception!
      try { 
        collabController0.collaboratePrediction(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nju.svcprediction.serviceImp.CollabSvcImp", e);
      }
  }

    @Test(timeout = 4000)
    public void test7()  throws Throwable  {
        CollabSvc collabService0 = mock(CollabSvc.class, new ViolatedAssumptionAnswer());
        doReturn((ResponseVO) null).when(collabService0).collaboratePrediction(anyInt() , anyString());
        CollabController collabController0 = new CollabController(collabService0);
        ResponseVO responseVO0 = collabController0.collaboratePrediction(1, "");
        assertNull(responseVO0);
    }

    @Test(timeout = 4000)
    public void test8()  throws Throwable  {
        CollabSvc collabService0 = mock(CollabSvc.class, new ViolatedAssumptionAnswer());
        doReturn((ResponseVO) null).when(collabService0).getFutureCollab(any());
        CollabController collabController0 = new CollabController(collabService0);
        LinkedList<Document> linkedList0 = new LinkedList<Document>();
        ArrayList<Document> arrayList1 = new ArrayList<Document>(linkedList0);
        ResponseVO responseVO0 = collabController0.collaboratePrediction(arrayList1);
        assertNull(responseVO0);
    }

}
